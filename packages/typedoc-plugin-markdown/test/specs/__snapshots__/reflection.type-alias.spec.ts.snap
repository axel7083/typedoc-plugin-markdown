// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: ArrayType

> **ArrayType**: \`string\`[]

Comments for ArrayType

## Source

[types.ts:12](http://source-url)
"
`;

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ArrayType

\`\`\`ts
type ArrayType: string[];
\`\`\`

Comments for ArrayType

## Source

[types.ts:12](http://source-url)
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: ConditionalType\\<T\\>

> **ConditionalType**\\<\`T\`\\>: \`T\` extends \`string\` ? \`"string"\` : \`T\` extends \`number\` ? \`"number"\` : \`T\` extends \`boolean\` ? \`"boolean"\` : \`T\` extends \`undefined\` ? \`"undefined"\` : \`"object"\`

Comments for ConditionalType

## Type parameters

• **T**

## Source

[types.ts:46](http://source-url)
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ConditionalType\\<T\\>

\`\`\`ts
type ConditionalType<T>: T extends string ? "string" : T extends number ? "number" : T extends boolean ? "boolean" : T extends undefined ? "undefined" : "object";
\`\`\`

Comments for ConditionalType

## Type parameters

| Type parameter |
| :------ |
| \`T\` |

## Source

[types.ts:46](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: TypeWithExternalSymbolLinkMapping

> **TypeWithExternalSymbolLinkMapping**: [\`Application\`]( https://typedoc.org/api/classes/Application.html )

Comments for TypeWithExternalSymbolLinkMapping

## Source

[types.ts:97](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# TypeWithExternalSymbolLinkMapping

\`\`\`ts
type TypeWithExternalSymbolLinkMapping: Application;
\`\`\`

Comments for TypeWithExternalSymbolLinkMapping

## Source

[types.ts:97](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: LiteralType

> **LiteralType**: \`Object\`

Comments for LiteralType

## Type declaration

### x

> **x**: \`string\`

comment for x

### y

> **y**: \`Object\`

comment for y

### y.x

> **y.x**: \`string\`

comment for y.x

### y.y

> **y.y**: \`boolean\` \\| \`string\`

comment for y.y

### y.z

> **y.z**: (\`x\`) => \`string\`

comment for y.z

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### z

> **z**: (\`x\`) => \`string\`

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### accessorA

> **\`get\`** **accessorA**(): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

Comments for accessorA getter

> **\`set\`** **accessorA**(\`x\`): \`void\`

Comments for accessorA setter

#### Parameters

• **x**: [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

### accessorB

> **\`get\`** **accessorB**(): \`string\`

> **\`set\`** **accessorB**(\`x\`): \`void\`

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### someFunction()

Comments for someFunction

#### Parameters

• **param**: \`string\`

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>

## Source

[types.ts:102](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# LiteralType

\`\`\`ts
type LiteralType: {
  x: string;
  y: {
     x: string;
     y: boolean | string;
     z: (x) => string;
  };
  z: (x) => string;
  get set accessorA: Promise<string>;
  get set accessorB: string;
  someFunction: Promise<any>;
};
\`\`\`

Comments for LiteralType

## Type declaration

| Member | Type | Description |
| :------ | :------ | :------ |
| \`x\` | \`string\` | comment for x |
| \`y\` | \\{   \`x\`: \`string\`;   \`y\`: \`boolean\` \\| \`string\`;   \`z\`: (\`x\`) => \`string\`;   } | comment for y |
| \`y.x\` | \`string\` | comment for y.x |
| \`y.y\` | \`boolean\` \\| \`string\` | comment for y.y |
| \`y.z\` | (\`x\`) => \`string\` | comment for y.z |
| \`z\` | (\`x\`) => \`string\` | - |
| \`get accessorA\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\> | Comments for accessorA getter |
| \`set accessorA\` | \`void\` | Comments for accessorA setter |
| \`get accessorB\` | \`string\` | - |
| \`set accessorB\` | \`void\` | - |
| \`someFunction\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\> | Comments for someFunction |

## Source

[types.ts:102](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: ExternalReferenceType

> **ExternalReferenceType**: [\`ClassWithTypeParameters\`](../classes/ClassWithTypeParameters.md)\\<\`"x"\`, \`"y"\`\\>

Comments for ExternalReferenceType

## Source

[types.ts:64](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ExternalReferenceType

\`\`\`ts
type ExternalReferenceType: ClassWithTypeParameters<"x", "y">;
\`\`\`

Comments for ExternalReferenceType

## Source

[types.ts:64](http://source-url)
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: FunctionType

> **FunctionType**: (\`name\`, \`value\`) => \`void\`

Comments for FunctionType

## Parameters

• **name**: \`string\`

• **value**: \`unknown\`

## Returns

\`void\`

## Source

[types.ts:92](http://source-url)
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# FunctionType

\`\`\`ts
type FunctionType: (name, value) => void;
\`\`\`

Comments for FunctionType

## Parameters

| Parameter | Type |
| :------ | :------ |
| \`name\` | \`string\` |
| \`value\` | \`unknown\` |

## Returns

\`void\`

## Source

[types.ts:92](http://source-url)
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: IndexAccessType

> **IndexAccessType**: [\`ArrayOfStuff\`](ArrayOfStuff.md)\\[\`number\`\\]

Comments for IndexAccessType

## Source

[types.ts:149](http://source-url)
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# IndexAccessType

\`\`\`ts
type IndexAccessType: ArrayOfStuff[number];
\`\`\`

Comments for IndexAccessType

## Source

[types.ts:149](http://source-url)
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: IntersectionType

> **IntersectionType**: [\`TupleType\`](TupleType.md) & [\`ArrayType\`](ArrayType.md) & \`Object\`

Comments for IntersectionType

## Type declaration

### bar

> **bar**: \`number\`

## Source

[types.ts:38](http://source-url)
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# IntersectionType

\`\`\`ts
type IntersectionType: TupleType & ArrayType & {
  bar: number;
};
\`\`\`

Comments for IntersectionType

## Type declaration

| Member | Type | Description |
| :------ | :------ | :------ |
| \`bar\` | \`number\` | - |

## Source

[types.ts:38](http://source-url)
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: PartialMappedType\\<T\\>

> **PartialMappedType**\\<\`T\`\\>: \`{ [P in keyof T]?: T[P] }\`

Comments for PartialMappedType

## Type parameters

• **T**

## Source

[types.ts:78](http://source-url)
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# PartialMappedType\\<T\\>

\`\`\`ts
type PartialMappedType<T>: { [P in keyof T]?: T[P] };
\`\`\`

Comments for PartialMappedType

## Type parameters

| Type parameter |
| :------ |
| \`T\` |

## Source

[types.ts:78](http://source-url)
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: PrimitiveType

> **PrimitiveType**: \`boolean\`

Comments for PrimitiveType

## Source

[types.ts:7](http://source-url)
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# PrimitiveType

\`\`\`ts
type PrimitiveType: boolean;
\`\`\`

Comments for PrimitiveType

## Source

[types.ts:7](http://source-url)
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: ReadonlyMappedType\\<T\\>

> **ReadonlyMappedType**\\<\`T\`\\>: \`{ readonly [P in keyof T]: T[P] }\`

Comments for ReadonlyMapedType

## Type parameters

• **T**

## Source

[types.ts:85](http://source-url)
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ReadonlyMappedType\\<T\\>

\`\`\`ts
type ReadonlyMappedType<T>: { readonly [P in keyof T]: T[P] };
\`\`\`

Comments for ReadonlyMapedType

## Type parameters

| Type parameter |
| :------ |
| \`T\` |

## Source

[types.ts:85](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: StringLiteralType

> **StringLiteralType**: \`" "\` \\| \`"string"\` \\| \`"string|with|pipes"\` \\| "string\\\`with\\\`backticks" \\| \`"<foo>"\` \\| \`"*"\`

Comments for StringLiteralType

## Source

[types.ts:22](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# StringLiteralType

\`\`\`ts
type StringLiteralType: 
  | " "
  | "string"
  | "string|with|pipes"
  | "string\\with\\backticks"
  | "<foo>"
  | "*";
\`\`\`

Comments for StringLiteralType

## Source

[types.ts:22](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: TupleType

> **TupleType**: [\`string\`, \`number\`]

Comments for TupleType

## Source

[types.ts:33](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# TupleType

\`\`\`ts
type TupleType: [string, number];
\`\`\`

Comments for TupleType

## Source

[types.ts:33](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: TypeWithTypeParams\\<T, R\\>

> **TypeWithTypeParams**\\<\`T\`, \`R\`\\>: [\`T\`, \`R\`]

Comments for TypeWithTypeParams

## Type parameters

• **T**

• **R**

## Source

[types.ts:59](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# TypeWithTypeParams\\<T, R\\>

\`\`\`ts
type TypeWithTypeParams<T, R>: [T, R];
\`\`\`

Comments for TypeWithTypeParams

## Type parameters

| Type parameter |
| :------ |
| \`T\` |
| \`R\` |

## Source

[types.ts:59](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: UnionType

> **UnionType**: \`string\` \\| \`boolean\` \\| \`Object\`

Comments for UnionType

## Source

[types.ts:17](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# UnionType

\`\`\`ts
type UnionType: string | boolean | {
  z: string;
};
\`\`\`

Comments for UnionType

## Source

[types.ts:17](http://source-url)
"
`;
